knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(tidymodels)
library(dplyr)
library(rio)
library(here)
d <- import(here("data", "train.csv"))
d <- d %>%  sample_frac(.2)
d <- d %>%  sample_frac(.2) %>%
mutate(sped_ed_fg = as.numeric(sped_ed_fg))
d <- d %>%  sample_frac(.2) %>%
mutate(sp_ed_fg = as.numeric(sp_ed_fg))
set.seed(3000)
(d_split <- initial_split(d)) #sets the proportions 75/25 for train/test
class(d_split)
#create separate datasets
d_train <- training(d_split)
d_test  <- testing(d_split)
set.seed(3000)
cv_split <- vfold_cv(d_train, v = 10)
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n))
str(cv_split$splits)
#shaina
sped_p = map_dbl(splits, ~prop.table(table(.x$data$sp_ed_fg))[["Y"]])
# My attempt at using the first split.
st_split <- cv_split %>%
map_dbl(splits, ~prop.table(table(.x$data$sp_ed_fg))[["Y"]])
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n))
# My attempt at using the first split.
st_split <- cv_split %>%
map_dbl(cv_split$splits, ~prop.table(table(.x$data$sp_ed_fg))[["Y"]])
# My attempt at using the first split.
st_split <- cv_split %>%
mutate(sped = map_dbl(cv_split$splits, ~prop.table(table(.x$data$sp_ed_fg))[["Y"]]))
# My attempt at using the first split.
st_split <- cv_split %>%
mutate(sped_p = map_dbl(splits, ~prop.table(table(.x$data$sp_ed_fg))[["Y"]]))
# My attempt at using the first split.
st_split <- cv_split %>%
mutate(sped_p = map(splits, ~prop.table(table(.x$data$sp_ed_fg))[["Y"]]))
mutate(sped_p = map(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]])
mutate(sped_p = map(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]))
mutate(sped_p = map(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]])))
mutate(sped_p = map(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]))
head(cv_split)
head(splits)
head(cv_split$splits)
str(cv_split$splits[[1]])
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n),
sped_p = map_dbl(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]])))
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n),
sped_p = map_dbl(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]))
(d_split <- initial_split(d)) #sets the proportions 75/25 for train/test
set.seed(3000)
(d_split <- initial_split(d)) #sets the proportions 75/25 for train/test
class(d_split)
#create separate datasets
d_train <- training(d_split)
d_test  <- testing(d_split)
set.seed(3000)
cv_split <- vfold_cv(d_train, v = 10)
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n))
sped_p = map_dbl(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]))
sped_p = map_dbl(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]])
cv_split <- vfold_cv(d_train, v = 10)
set.seed(3000)
cv_split <- vfold_cv(d_train, v = 10)
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n),
sped_p = map_dbl(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]))
cv_split$splits[[1]]
cv_split$splits$[[1]]
head(cv_split$splits)
head(cv_split$splits$[[1]]
head(cv_split$splits$[[1]])
head(cv_split)
head(cv_split$splits)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(tidymodels)
library(dplyr)
library(rio)
library(here)
d <- import(here("data", "train.csv"))
d <- d %>%  sample_frac(.2)
set.seed(3000)
(d_split <- initial_split(d)) #sets the proportions 75/25 for train/test
d_split %>%
training() %>%
nrow() / nrow(d) #check what percent of intial daaset is training
class(d_split)
#create separate datasets
d_train <- training(d_split)
d_test  <- testing(d_split)
#proportion for train
d_split %>%
training() %>%
nrow() / nrow(d)
#proportion for test
d_split %>%
testing() %>%
nrow() / nrow(d)
set.seed(3000)
cv_split <- vfold_cv(d_train, v = 10)
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n),
sped_p = map_dbl(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]),
sped_p_analysis = map(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]/analysis_n),
sped_p_assessment = map(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]/assessment_n))
#Fold 1 & 2
assessment(cv_split$splits[[1]])$id
#Fold 1 & 2
unique(assessment(cv_split$splits[[1]])$id)
#Fold 1 & 2
unique(assessment(cv_split$splits[[1]])$id)
#akhila's attempt
length(unique(c(assessment(cv_split$splits[[1]])$id,
assessment(cv_split$splits[[2]])$id)))
#Shaina's (failed) attempt
length(unique(assessment(cv_split$splits[[1]])$id, assessment(cv_split$splits[[2]])$id))
#akhila's attempt
length(intersect(c(assessment(cv_split$splits[[1]])$id,
assessment(cv_split$splits[[2]])$id)))
#akhila's attempt
length(intersect(assessment(cv_split$splits[[1]])$id,
assessment(cv_split$splits[[2]])$id))
length(intersect(assessment(cv_split$splits[[9]])$id,
assessment(cv_split$splits[[10]])$id))
set.seed(3000)
?mc_cv()
mc_split <- mc_cv(d_train, prop = 0.70, times = 20)
analysis(mc_split$splits[[1]]) %>%
nrow() / nrow(mc_splits$splits[[1]]$data)
analysis(mc_split$splits[[1]]) %>%
nrow() / nrow(mc_split$splits[[1]]$data)
#propotion in assessment
assessment(mc_split$splits[[1]]) %>%
nrow() / nrow(mc_split$splits[[1]]$data)
#akhila's attempt -- intersect instead of unique from Shaina's attempt above
length(intersect(assessment(cv_split$splits[[1]])$id,
assessment(cv_split$splits[[2]])$id))
length(intersect(assessment(cv_split$splits[[9]])$id,
assessment(cv_split$splits[[10]])$id))
#proportion in analysis
analysis(mc_split$splits[[1]]) %>%
nrow() / nrow(mc_split$splits[[1]]$data)
#propotion in assessment
assessment(mc_split$splits[[1]]) %>%
nrow() / nrow(mc_split$splits[[1]]$data)
length(intersect(assessment(mc_split$splits[[8]])$id,
assessment(mc_split$splits[[12]])$id))
length(intersect(assessment(mc_split$splits[[2]])$id,
assessment(mc_split$splits[[20]])$id))
?bootstraps()
boot_split <- bootstraps(d_train, times = 500)
boot_split <- bootstraps(d_train, times = 500)
set.seed(3000)
boot_split <- bootstraps(d_train, times = 500)
head(boot_split)
boot_split$splits[[1]]
#bootstrap resample analysis set
500
#bootstrap resample assessment set
(.36)*(500)
# no resample analysis set
(.6321)*(500)
#no resample assessment set
(1-.6321)*(500)
