knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(tidymodels)
library(dplyr)
library(rio)
library(here)
d <- import(here("data", "train.csv"))
d <- d %>%  sample_frac(.2)
d <- d %>%  sample_frac(.2) %>%
mutate(sped_ed_fg = as.numeric(sped_ed_fg))
d <- d %>%  sample_frac(.2) %>%
mutate(sp_ed_fg = as.numeric(sp_ed_fg))
set.seed(3000)
(d_split <- initial_split(d)) #sets the proportions 75/25 for train/test
class(d_split)
#create separate datasets
d_train <- training(d_split)
d_test  <- testing(d_split)
set.seed(3000)
cv_split <- vfold_cv(d_train, v = 10)
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n))
str(cv_split$splits)
#shaina
sped_p = map_dbl(splits, ~prop.table(table(.x$data$sp_ed_fg))[["Y"]])
# My attempt at using the first split.
st_split <- cv_split %>%
map_dbl(splits, ~prop.table(table(.x$data$sp_ed_fg))[["Y"]])
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n))
# My attempt at using the first split.
st_split <- cv_split %>%
map_dbl(cv_split$splits, ~prop.table(table(.x$data$sp_ed_fg))[["Y"]])
# My attempt at using the first split.
st_split <- cv_split %>%
mutate(sped = map_dbl(cv_split$splits, ~prop.table(table(.x$data$sp_ed_fg))[["Y"]]))
# My attempt at using the first split.
st_split <- cv_split %>%
mutate(sped_p = map_dbl(splits, ~prop.table(table(.x$data$sp_ed_fg))[["Y"]]))
# My attempt at using the first split.
st_split <- cv_split %>%
mutate(sped_p = map(splits, ~prop.table(table(.x$data$sp_ed_fg))[["Y"]]))
mutate(sped_p = map(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]])
mutate(sped_p = map(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]))
mutate(sped_p = map(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]])))
mutate(sped_p = map(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]))
head(cv_split)
head(splits)
head(cv_split$splits)
str(cv_split$splits[[1]])
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n),
sped_p = map_dbl(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]])))
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n),
sped_p = map_dbl(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]))
(d_split <- initial_split(d)) #sets the proportions 75/25 for train/test
set.seed(3000)
(d_split <- initial_split(d)) #sets the proportions 75/25 for train/test
class(d_split)
#create separate datasets
d_train <- training(d_split)
d_test  <- testing(d_split)
set.seed(3000)
cv_split <- vfold_cv(d_train, v = 10)
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n))
sped_p = map_dbl(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]))
sped_p = map_dbl(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]])
cv_split <- vfold_cv(d_train, v = 10)
set.seed(3000)
cv_split <- vfold_cv(d_train, v = 10)
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n),
sped_p = map_dbl(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]))
cv_split$splits[[1]]
cv_split$splits$[[1]]
head(cv_split$splits)
head(cv_split$splits$[[1]]
head(cv_split$splits$[[1]])
head(cv_split)
head(cv_split$splits)
