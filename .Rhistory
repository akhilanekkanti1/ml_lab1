knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(tidymodels)
install.packages('tidymodels')
install.packages("tidymodels")
install.packages("tidymodels")
install.packages('tidymodels')
install.packages("tidymodels")
install.packages("tidymodels")
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(tidymodels)
library(dplyr)
library(rio)
library(here)
d <- import(here("data", "train.csv"))
d <- d %>%  sample_frac(.2)
set.seed(3000)
(d_split <- initial_split(d)) #sets the proportions 75/25 for train/test
d_split %>%
training() %>%
nrow() / nrow(d) #check what percent of intial daaset is training
class(d_split)
#create separate datasets
d_train <- training(d_split)
d_test  <- testing(d_split)
#proportion for train
d_split %>%
training() %>%
nrow() / nrow(d)
#proportion for test
d_split %>%
testing() %>%
nrow() / nrow(d)
set.seed(3000)
cv_split <- vfold_cv(d_train, v = 10)
?prop.table
d$sp_ed_fg
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(tidymodels)
library(dplyr)
library(rio)
library(here)
?intersect
assessment(data_train_r10$splits[[1]])$id
assessment(cv_split$splits[[1]])$id
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(tidymodels)
library(dplyr)
library(rio)
library(here)
d <- import(here("data", "train.csv"))
d <- d %>%  sample_frac(.2)
set.seed(3000)
(d_split <- initial_split(d)) #sets the proportions 75/25 for train/test
d_split %>%
training() %>%
nrow() / nrow(d) #check what percent of intial daaset is training
class(d_split)
#create separate datasets
d_train <- training(d_split)
d_test  <- testing(d_split)
#proportion for train
d_split %>%
training() %>%
nrow() / nrow(d)
#proportion for test
d_split %>%
testing() %>%
nrow() / nrow(d)
set.seed(3000)
cv_split <- vfold_cv(d_train, v = 10)
cv_split <- cv_split %>%
mutate(analysis_n = map_dbl(splits, ~analysis(.x) %>% nrow()),
assessment_n = map_dbl(splits, ~assessment(.x) %>%  nrow()),
analysis_p = analysis_n / (analysis_n + assessment_n),
assessment_p = assessment_n / (analysis_n + assessment_n),
sped_p = map_dbl(splits, ~prop.table(table(.x$d$sp_ed_fg))[["Y"]]))
assessment(cv_split$splits[[1]])$id
